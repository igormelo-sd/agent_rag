# agent_fixed.py - Agente RAG Corrigido e Otimizado
import os
import logging
from typing import Dict, Any, List, Tuple
import warnings

# Suprimir warnings desnecess√°rios
warnings.filterwarnings("ignore", category=UserWarning)
warnings.filterwarnings("ignore", category=FutureWarning)

# Carregar vari√°veis do arquivo .env
from dotenv import load_dotenv
load_dotenv()

# Desabilitar LangSmith e telemetria
os.environ["LANGCHAIN_TRACING_V2"] = "false"
os.environ["LANGCHAIN_API_KEY"] = ""
os.environ["ANONYMIZED_TELEMETRY"] = "False"

# Imports para LangChain
from langchain_openai import ChatOpenAI
from langchain.agents import create_react_agent, AgentExecutor
from langchain.tools import Tool
from langchain.prompts import PromptTemplate
from langchain.memory import ConversationBufferMemory
from langchain.schema import HumanMessage, AIMessage

# Import do sistema RAG corrigido
RAG_AVAILABLE = False
try:
    # Tentar importar do arquivo corrigido primeiro
    try:
        from rag_system_fixed import RagSystem
        RAG_AVAILABLE = True
        print("‚úÖ RagSystem corrigido importado com sucesso")
    except ImportError:
        # Fallback para o sistema original
        from rag_system import RagSystem
        RAG_AVAILABLE = True
        print("‚úÖ RagSystem original importado")
except ImportError as e:
    RAG_AVAILABLE = False
    print(f"‚ùå ERRO: Sistema RAG n√£o dispon√≠vel: {e}")

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class RAGAgentFixed:
    """
    Agente RAG corrigido com inicializa√ß√£o robusta e tratamento de erros aprimorado.
    """
    
    def __init__(self, openai_api_key: str = None, force_rag: bool = True):
        """
        Inicializa o agente RAG com verifica√ß√µes robustas.
        
        Args:
            openai_api_key: Chave da API da OpenAI
            force_rag: Se True, exige sistema RAG funcional
        """
        self.force_rag = force_rag
        self.rag_available = False
        self.system_ready = False
        
        print("üöÄ Inicializando Agente RAG...")
        
        # Verificar e configurar API Key
        if not self._setup_api_key(openai_api_key):
            if force_rag:
                raise ValueError("OPENAI_API_KEY √© obrigat√≥ria")
            return
        
        # Verificar disponibilidade do RAG
        if not RAG_AVAILABLE:
            error_msg = self._get_rag_error_message()
            if force_rag:
                raise RuntimeError(error_msg)
            else:
                print(error_msg)
                return
        
        # Inicializar sistema RAG
        if not self._initialize_rag_system():
            if force_rag:
                raise RuntimeError("‚ùå Sistema RAG obrigat√≥rio n√£o p√¥de ser inicializado")
            return
        
        # Configurar LLM
        self.llm = ChatOpenAI(
            temperature=0.3,
            model="gpt-4o-mini",
            max_tokens=6000,
            top_p=0.8,
        )
        
        # Configurar mem√≥ria
        self.memory = ConversationBufferMemory(
            memory_key="chat_history",
            return_messages=True,
            max_token_limit=12000
        )
        
        # Criar ferramentas
        self.tools = self._create_tools()
        
        # Criar prompt
        self.prompt = self._create_prompt()
        
        # Criar agente
        try:
            self.agent = create_react_agent(
                llm=self.llm,
                tools=self.tools,
                prompt=self.prompt
            )
            
            self.agent_executor = AgentExecutor(
                agent=self.agent,
                tools=self.tools,
                verbose=False,  # Reduzir verbosidade
                handle_parsing_errors=True,
                max_iterations=5,
                max_execution_time=120,
                return_intermediate_steps=False
            )
            
            self.system_ready = True
            print("‚úÖ Agente RAG inicializado com sucesso")
            
        except Exception as e:
            logger.error(f"Erro ao criar agente: {e}")
            if force_rag:
                raise RuntimeError(f"Falha na cria√ß√£o do agente: {e}")
        
        # Teste inicial se sistema estiver pronto
        if self.system_ready and self.rag_available:
            self._test_system_integration()
    
    def _setup_api_key(self, api_key: str = None) -> bool:
        """Configura e valida a API key da OpenAI."""
        try:
            if api_key:
                os.environ["OPENAI_API_KEY"] = api_key
            
            # Verificar se foi carregada
            current_key = os.getenv("OPENAI_API_KEY")
            if not current_key:
                print("‚ùå OPENAI_API_KEY n√£o encontrada")
                print("üí° Solu√ß√µes:")
                print("1. Criar arquivo .env: OPENAI_API_KEY=sk-seu-token-aqui")
                print("2. Passar como par√¢metro: RAGAgentFixed(openai_api_key='sk-...')")
                return False
            
            if not current_key.startswith('sk-'):
                print("‚ùå OPENAI_API_KEY parece inv√°lida")
                return False
            
            print(f"‚úÖ API Key configurada: {current_key[:10]}...")
            return True
            
        except Exception as e:
            logger.error(f"Erro na configura√ß√£o da API key: {e}")
            return False
    
    def _get_rag_error_message(self) -> str:
        """Retorna mensagem de erro detalhada para problemas do RAG."""
        return """
‚ùå SISTEMA RAG N√ÉO DISPON√çVEL

PROBLEMAS IDENTIFICADOS:
- M√≥dulo rag_system n√£o p√¥de ser importado
- Depend√™ncias podem estar faltando

SOLU√á√ïES RECOMENDADAS:
1. Instalar depend√™ncias:
   pip install chromadb sentence-transformers openai python-dotenv

2. Verificar arquivos:
   - rag_system.py ou rag_system_fixed.py no mesmo diret√≥rio
   - Arquivo .env com OPENAI_API_KEY

3. Testar sistema RAG independentemente:
   python rag_system_fixed.py

4. Verificar logs para erros espec√≠ficos

‚ö†Ô∏è Este agente foi projetado para operar com sistema RAG.
Sem ele, as respostas ser√£o limitadas e imprecisas.
        """
    
    def _initialize_rag_system(self) -> bool:
        """Inicializa o sistema RAG com verifica√ß√µes robustas."""
        try:
            print("üîÑ Inicializando sistema RAG...")
            
            # Criar inst√¢ncia do RAG
            self.rag = RagSystem(
                enable_reranking=True,
                enable_logging=True,
                max_retries=3
            )
            
            # Verificar se foi inicializado
            if not hasattr(self.rag, 'is_initialized') or not self.rag.is_initialized:
                print("‚ùå Sistema RAG falhou na inicializa√ß√£o")
                return False
            
            # Verificar status
            status = self.rag.get_system_status()
            doc_count = status.get('collection_count', 0)
            
            print(f"‚úÖ Sistema RAG ativo")
            print(f"üìä Status: {doc_count} documentos na base")
            
            if doc_count == 0:
                print("‚ö†Ô∏è ATEN√á√ÉO: Base de dados vazia!")
                print("üí° Execute o processo de indexa√ß√£o para popular a base")
                if self.force_rag:
                    print("‚ùå Modo RAG obrigat√≥rio requer dados na base")
                    return False
            
            self.rag_available = True
            return True
            
        except Exception as e:
            logger.error(f"Erro na inicializa√ß√£o do RAG: {e}")
            print(f"‚ùå Falha no RAG: {e}")
            return False
    
    def _test_system_integration(self) -> None:
        """Testa a integra√ß√£o completa do sistema."""
        try:
            print("üîß Testando integra√ß√£o do sistema...")
            
            # Teste do RAG
            test_result = self.rag.query("teste sistema economia")
            
            if 'error' in test_result:
                print(f"‚ö†Ô∏è Teste RAG com problemas: {test_result['error']}")
            else:
                processing_time = test_result.get('processing_time_ms', 0)
                num_docs = test_result.get('num_documents', 0)
                print(f"‚úÖ Teste RAG: {num_docs} docs, {processing_time:.1f}ms")
            
        except Exception as e:
            print(f"‚ö†Ô∏è Erro no teste de integra√ß√£o: {e}")
    
    def _create_tools(self) -> List[Tool]:
        """Cria ferramentas baseadas na disponibilidade do RAG."""
        
        if not self.rag_available:
            return [
                Tool(
                    name="sistema_indisponivel",
                    func=self._rag_unavailable_response,
                    description="Informa que o sistema RAG est√° indispon√≠vel"
                )
            ]
        
        return [
            Tool(
                name="consulta_rag_principal",
                func=self._main_rag_query,
                description="""FERRAMENTA PRINCIPAL - Use SEMPRE primeiro.
                Consulta informa√ß√µes na base de conhecimento sobre economia de S√£o Paulo.
                Especializada em ind√∫strias, com√©rcio exterior, e indicadores econ√¥micos.
                Input: Pergunta completa do usu√°rio"""
            ),
            Tool(
                name="busca_rag_detalhada",
                func=self._detailed_rag_search,
                description="""Use para buscar informa√ß√µes espec√≠ficas e detalhadas.
                Ideal para dados estat√≠sticos, n√∫meros espec√≠ficos, e an√°lises setoriais.
                Input: Aspecto espec√≠fico para pesquisar"""
            ),
            Tool(
                name="verificacao_rag",
                func=self._verify_rag_quality,
                description="""Use para verificar qualidade e completude das informa√ß√µes.
                Avalia se h√° dados suficientes para resposta completa.
                Input: T√≥pico para verificar cobertura"""
            ),
            Tool(
                name="diagnostico_sistema",
                func=self._system_diagnostics,
                description="""Use quando houver problemas com outras ferramentas.
                Fornece diagn√≥stico e status do sistema.
                Input: 'diagnostico' ou descri√ß√£o do problema"""
            )
        ]
    
    def _create_prompt(self) -> PromptTemplate:
        """Cria prompt otimizado baseado na disponibilidade do RAG."""
        
        if not self.rag_available:
            template = """SISTEMA RAG INDISPON√çVEL

‚ùå O sistema de consulta n√£o est√° funcionando.
Use a ferramenta dispon√≠vel para informar sobre a indisponibilidade.

Ferramentas: {tools}

Formato:
Question: {input}
Thought: Explicar indisponibilidade
Action: sistema_indisponivel
Action Input: mensagem explicativa
Observation: resultado
Final Answer: Explica√ß√£o para o usu√°rio

Pergunta: {input}
{agent_scratchpad}"""
        else:
            template = """Voc√™ √© um ESPECIALISTA em economia do Estado de S√£o Paulo, com foco espec√≠fico em:
- Ind√∫stria Automotiva
- Ind√∫stria T√™xtil e de Confec√ß√µes  
- Ind√∫stria Farmac√™utica
- M√°quinas e Equipamentos
- Mapa da Ind√∫stria Paulista
- Ind√∫stria Metal√∫rgica
- Agropecu√°ria e Transi√ß√£o Energ√©tica
- Balan√ßa Comercial Paulista
- Biocombust√≠veis

INSTRU√á√ïES IMPORTANTES PARA RESPOSTAS DETALHADAS:

SEMPRE use m√∫ltiplas ferramentas para coletar informa√ß√µes abrangentes
Estruture suas respostas com numera√ß√£o, subt√≥picos e formata√ß√£o clara
Inclua dados espec√≠ficos, estat√≠sticas e exemplos sempre que dispon√≠vel
Desenvolva cada ponto com explica√ß√µes detalhadas, n√£o apenas liste
Conecte informa√ß√µes entre diferentes aspectos do tema
Use linguagem t√©cnica apropriada mas acess√≠vel
FORMATO OBRIGAT√ìRIO para Final Answer:
- Use numera√ß√£o (1., 2., 3., etc.) para pontos principais
- Use subt√≥picos com negrito para destacar aspectos importantes
- Inclua dados quantitativos quando dispon√≠vel
- Desenvolva cada ponto com pelo menos 2-3 frases explicativas
- Termine com uma s√≠ntese/conclus√£o que conecte todos os pontos
- Sempre que necess√°rio use "consulta_rag_principal" primeiro
- Para detalhes espec√≠ficos: "busca_rag_detalhada"  


Ferramentas dispon√≠veis:
{tools}

Use o seguinte formato de racioc√≠nio:

Question: a pergunta de entrada que voc√™ deve responder
Thought: an√°lise da pergunta e estrat√©gia para buscar informa√ß√µes abrangentes
Action: a a√ß√£o a ser tomada, deve ser uma das [{tool_names}]
Action Input: a entrada espec√≠fica para a a√ß√£o
Observation: o resultado da a√ß√£o
... (repita Thought/Action/Action Input/Observation quantas vezes necess√°rio - use pelo menos 2-3 ferramentas diferentes)
Thought: an√°lise completa de todas as informa√ß√µes coletadas
Final Answer: resposta DETALHADA, ESTRUTURADA e COMPLETA seguindo o formato obrigat√≥rio

LEMBRE-SE: Respostas curtas ou superficiais n√£o s√£o aceit√°veis, exceto em casos espec√≠ficos, como:
Sauda√ß√µes simples (ex.: "Ol√°, tudo bem?", "Ol√°", "Oi", "Oi√™", "Ol√°, tudo bem", "E a√≠", "Beleza", 
"Fala a√≠", "Como vai", "Como est√°", "Tudo certo", "Tudo tranquilo", "Tranquilo", 
"Suave", "Suave na nave", "De boa", "E a√≠, meu chapa", "E a√≠, parceiro", "Salve", 
"Salve, mano", "Sauda√ß√µes", "Al√¥", "Bom dia", "Boa tarde", "Boa noite", "Como voc√™ est√°", 
"Como tem passado", "Tudo em ordem", "Tudo beleza", "Tudo joia", "Tudo legal", "Tudo bacana", 
"Tudo em paz", "Opa", "Opa, tudo certo", "E a√≠, firmeza", "Firme e forte", "Firmeza total", 
"Oi, sumido", "Long time no see", "Quanto tempo", "Que bom te ver", "Que prazer te ver", "Seja bem-vindo", 
"Bem-vindo", "Bem-vinda", "Seja bem-vinda", "Ol√°, meu amigo", "Ol√°, minha amiga", "Sauda√ß√µes cordiais", 
"Sauda√ß√µes fraternas", "Sauda√ß√µes formais", "√â um prazer v√™-lo", "√â um prazer rev√™-la", "Que alegria te ver", 
"Que satisfa√ß√£o encontr√°-lo", "Que honra t√™-lo aqui", "Como v√£o as coisas", "Como est√£o as coisas", 
"Como anda a vida", "Tudo em cima", "T√° tudo certo", "T√° tranquilo", "E a√≠, como foi o dia", 
"E a√≠, como est√£o as novidades", "E a√≠, como vai a fam√≠lia", "E a√≠, como vai a vida", 
"E a√≠, preparado pro dia", "Preparado pra batalha", "Como foi o fim de semana", "Como foi o feriado", 
"Tudo certinho", "E a√≠, guerreiro", "E a√≠, campe√£", "Fala, meu rei", "Fala, minha rainha", "Bom te ver de novo", 
"Que bom te encontrar", "E a√≠, t√° sumido", "Ol√° de novo", "Fala, meu consagrado", "Fala, minha consagrada".
"E a√≠?", "Beleza?", "Fala a√≠?", "Como vai?", "Como est√°?", "Tudo certo?", "Tudo tranquilo?", "Tranquilo?", 
"Suave?", "Suave na nave?", "De boa?");
Perguntas extremamente objetivas ou que envolvam dados muito espec√≠ficos.
Fora essas exce√ß√µes, cada resposta deve ser abrangente, bem estruturada e rica em detalhes.

Pergunta: {input}
Racioc√≠nio: {agent_scratchpad}"""
            
        return PromptTemplate.from_template(template)
    
    def _main_rag_query(self, query: str) -> str:
        """Consulta principal ao sistema RAG."""
        if not self.rag_available:
            return "‚ùå Sistema RAG n√£o dispon√≠vel"
        
        try:
            logger.info(f"Consulta RAG principal: {query}")
            
            # Executar consulta
            result = self.rag.query(query, n_results=6)
            
            if 'error' in result:
                return f"‚ö†Ô∏è Erro no RAG: {result['error']}"
            
            response = result.get("response", "")
            num_docs = result.get('num_documents', 0)
            processing_time = result.get('processing_time_ms', 0)
            confidence_scores = result.get('confidence_scores', [])
            
            # Enriquecer resposta
            if response:
                enriched = f"{response}\n\n"
                enriched += f"üìä _Processados {num_docs} documento(s) em {processing_time:.1f}ms_"
                
                if confidence_scores:
                    avg_conf = sum(confidence_scores) / len(confidence_scores)
                    enriched += f"\nüéØ _Confian√ßa m√©dia: {avg_conf:.2f}_"
                
                return enriched
            else:
                return "‚ö†Ô∏è Nenhuma informa√ß√£o relevante encontrada na base"
            
        except Exception as e:
            logger.error(f"Erro na consulta principal: {e}")
            return f"‚ùå Erro na consulta: {str(e)}"
    
    def _detailed_rag_search(self, aspect: str) -> str:
        """Busca detalhada por aspectos espec√≠ficos."""
        if not self.rag_available:
            return "‚ùå Sistema RAG n√£o dispon√≠vel"
        
        try:
            logger.info(f"Busca detalhada: {aspect}")
            
            # Consultas espec√≠ficas para diferentes tipos de dados
            queries = [
                f"dados estat√≠sticos {aspect} S√£o Paulo",
                f"indicadores {aspect} economia paulista",
                f"n√∫meros {aspect} ind√∫stria SP"
            ]
            
            best_result = None
            best_score = 0
            
            for query in queries:
                try:
                    result = self.rag.query(query, n_results=4)
                    if 'error' not in result:
                        quality = result.get('quality_assessment', {})
                        score = quality.get('quality_score', 0)
                        
                        if score > best_score:
                            best_score = score
                            best_result = result
                except Exception:
                    continue
            
            if best_result and best_result.get('response'):
                response = best_result['response']
                num_docs = best_result.get('num_documents', 0)
                return f"{response}\n\nüìä _Busca detalhada: {num_docs} documento(s), score: {best_score:.2f}_"
            else:
                return "‚ö†Ô∏è Dados espec√≠ficos n√£o encontrados para este aspecto"
                
        except Exception as e:
            logger.error(f"Erro na busca detalhada: {e}")
            return f"‚ùå Erro na busca detalhada: {str(e)}"
    
    def _verify_rag_quality(self, topic: str) -> str:
        """Verifica qualidade dos dados dispon√≠veis."""
        if not self.rag_available:
            return "‚ùå Sistema RAG n√£o dispon√≠vel"
        
        try:
            # Consulta para avalia√ß√£o
            result = self.rag.query(topic, n_results=8)
            
            if 'error' in result:
                return f"‚ö†Ô∏è Erro na verifica√ß√£o: {result['error']}"
            
            quality = result.get('quality_assessment', {})
            num_docs = result.get('num_documents', 0)
            quality_score = quality.get('quality_score', 0)
            
            verification = "üîç **VERIFICA√á√ÉO DE QUALIDADE**\n\n"
            
            if num_docs == 0:
                verification += "‚ùå **Status**: Nenhum documento encontrado\n"
                verification += "üìã **Recomenda√ß√£o**: Reformular consulta\n"
            elif num_docs < 3:
                verification += f"‚ö†Ô∏è **Status**: Poucos documentos ({num_docs})\n"
                verification += "üìã **Recomenda√ß√£o**: Busca complementar necess√°ria\n"
            else:
                verification += f"‚úÖ **Status**: Boa cobertura ({num_docs} documentos)\n"
            
            if quality_score > 0.7:
                verification += "üéØ **Qualidade**: Alta confian√ßa\n"
            elif quality_score > 0.4:
                verification += "üéØ **Qualidade**: Confian√ßa moderada\n"  
            else:
                verification += "‚ö†Ô∏è **Qualidade**: Baixa confian√ßa\n"
            
            return verification
            
        except Exception as e:
            return f"‚ùå Erro na verifica√ß√£o: {str(e)}"
    
    def _system_diagnostics(self, input_text: str) -> str:
        """Diagn√≥stico completo do sistema."""
        if not self.rag_available:
            return """‚ùå **DIAGN√ìSTICO: Sistema RAG Indispon√≠vel**

**Verifica√ß√µes necess√°rias:**
1. Instalar depend√™ncias: pip install chromadb sentence-transformers
2. Verificar arquivo .env com OPENAI_API_KEY  
3. Confirmar rag_system.py no diret√≥rio
4. Executar indexa√ß√£o de documentos"""
        
        try:
            # Status do RAG
            status = self.rag.get_system_status()
            
            diag = "üîß **DIAGN√ìSTICO COMPLETO**\n\n"
            diag += "**COMPONENTES:**\n"
            diag += f"- Sistema inicializado: {'‚úÖ' if status['initialized'] else '‚ùå'}\n"
            diag += f"- ChromaDB: {'‚úÖ' if status['chroma_client'] else '‚ùå'}\n"
            diag += f"- OpenAI: {'‚úÖ' if status['openai_client'] else '‚ùå'}\n"
            diag += f"- Cole√ß√£o: {'‚úÖ' if status['collection_exists'] else '‚ùå'}\n"
            diag += f"- Documentos: {status['collection_count']}\n"
            diag += f"- Reranking: {'‚úÖ' if status['reranking_enabled'] else '‚ùå'}\n\n"
            
            # Teste funcional
            try:
                test_result = self.rag.query("teste diagn√≥stico")
                if 'error' not in test_result:
                    diag += "‚úÖ **TESTE**: Sistema respondendo normalmente\n"
                else:
                    diag += f"‚ùå **TESTE**: {test_result['error']}\n"
            except Exception as e:
                diag += f"‚ùå **TESTE**: Erro - {e}\n"
            
            return diag
            
        except Exception as e:
            return f"‚ùå Erro no diagn√≥stico: {str(e)}"
    
    def _rag_unavailable_response(self, message: str) -> str:
        """Resposta quando RAG n√£o est√° dispon√≠vel."""
        return """‚ùå **SISTEMA RAG INDISPON√çVEL**

Este agente requer uma base de conhecimento especializada sobre economia de S√£o Paulo.

**Para resolver:**
1. Instalar: `pip install chromadb sentence-transformers openai`
2. Verificar arquivo .env com OPENAI_API_KEY
3. Executar indexa√ß√£o de documentos
4. Testar rag_system.py independentemente

**Status**: Sistema n√£o funcional sem RAG"""
    
    def consultar(self, pergunta: str) -> str:
        """
        M√©todo principal de consulta.
        
        Args:
            pergunta: Pergunta sobre economia de S√£o Paulo
            
        Returns:
            Resposta baseada no sistema RAG
        """
        if not pergunta.strip():
            return "Por favor, forne√ßa uma pergunta v√°lida."
        
        if not self.system_ready:
            return self._get_system_not_ready_message()
        
        try:
            logger.info(f"Processando consulta: {pergunta}")
            
            # Preparar input otimizado
            optimized_input = f"""
CONSULTA: {pergunta}

INSTRU√á√ïES:
1. Use consulta_rag_principal primeiro
2. Busque dados espec√≠ficos se necess√°rio
3. Verifique qualidade das informa√ß√µes
4. Estruture resposta profissionalmente

OBJETIVO: Resposta completa e precisa baseada na base de conhecimento.
            """
            
            # Executar via agente
            resultado = self.agent_executor.invoke({"input": optimized_input})
            resposta = resultado.get("output", "N√£o foi poss√≠vel obter resposta.")
            
            # Validar uso do RAG
            if not self._validate_rag_usage(resposta):
                logger.warning("Resposta pode n√£o ter usado adequadamente o RAG")
                # Tentar novamente com instru√ß√£o mais espec√≠fica
                retry_input = f"OBRIGAT√ìRIO: Use ferramentas RAG para responder: {pergunta}"
                resultado_retry = self.agent_executor.invoke({"input": retry_input})
                resposta = resultado_retry.get("output", resposta)
            
            # Adicionar indicador se necess√°rio
            if not any(indicator in resposta for indicator in ["üìä", "‚úÖ", "üéØ"]):
                resposta += "\n\nüìö _Resposta baseada na base de conhecimento especializada_"
            
            return resposta
            
        except Exception as e:
            logger.error(f"Erro na consulta: {e}")
            return f"""‚ùå Erro no processamento: {str(e)}

**Solu√ß√µes poss√≠veis:**
1. Verificar status do sistema RAG
2. Reformular a pergunta
3. Usar diagn√≥stico_sistema para mais detalhes"""
    
    def _get_system_not_ready_message(self) -> str:
        """Mensagem quando sistema n√£o est√° pronto."""
        return """‚ùå **SISTEMA N√ÉO EST√Å PRONTO**

**Status dos componentes:**
- Sistema RAG: ‚ùå N√£o inicializado
- Agente LangChain: ‚ùå N√£o configurado

**Para resolver:**
1. Verificar depend√™ncias instaladas
2. Confirmar OPENAI_API_KEY no .env
3. Testar sistema RAG independentemente
4. Reinicializar o agente

**Comando de diagn√≥stico:** `agent.get_system_info()`"""
    
    def _validate_rag_usage(self, response: str) -> bool:
        """Valida se a resposta usou o sistema RAG."""
        rag_indicators = [
            "üìä", "‚úÖ", "üéØ", "documento(s)", "processados", 
            "base de conhecimento", "confian√ßa", "Processados"
        ]
        
        return sum(1 for indicator in rag_indicators if indicator in response) >= 1
    
    def get_system_info(self) -> Dict[str, Any]:
        """Informa√ß√µes completas do sistema."""
        info = {
            "agent_ready": self.system_ready,
            "rag_available": self.rag_available,
            "force_rag_mode": self.force_rag,
            "tools_count": len(self.tools) if hasattr(self, 'tools') else 0,
            "rag_system_imported": RAG_AVAILABLE
        }
        
        if self.rag_available and hasattr(self, 'rag'):
            try:
                rag_status = self.rag.get_system_status()
                info.update(rag_status)
                info["fully_functional"] = (
                    rag_status.get('initialized', False) and
                    rag_status.get('collection_count', 0) > 0 and
                    self.system_ready
                )
            except Exception as e:
                info["rag_error"] = str(e)
                info["fully_functional"] = False
        else:
            info["fully_functional"] = False
        
        return info
    
    def test_complete_system(self) -> Dict[str, Any]:
        """Teste completo do sistema integrado."""
        from datetime import datetime
        
        test_results = {
            "timestamp": datetime.now().isoformat(),
            "agent_tests": {},
            "rag_tests": {},
            "integration_tests": {},
            "overall_status": "unknown",
            "recommendations": []
        }
        
        # Testes do agente
        test_results["agent_tests"]["initialization"] = {
            "status": "passed" if self.system_ready else "failed",
            "details": "Agente inicializado" if self.system_ready else "Agente n√£o inicializado"
        }
        
        test_results["agent_tests"]["tools"] = {
            "status": "passed" if hasattr(self, 'tools') and self.tools else "failed",
            "details": f"{len(self.tools) if hasattr(self, 'tools') else 0} ferramentas"
        }
        
        # Testes do RAG
        if self.rag_available and hasattr(self, 'rag'):
            try:
                rag_test_results = self.rag.test_system()
                test_results["rag_tests"] = rag_test_results["tests"]
            except Exception as e:
                test_results["rag_tests"]["error"] = str(e)
        
        # Teste de integra√ß√£o
        if self.system_ready and self.rag_available:
            try:
                test_query = "teste integra√ß√£o economia S√£o Paulo"
                response = self.consultar(test_query)
                
                if "‚ùå" not in response and len(response) > 50:
                    test_results["integration_tests"]["full_query"] = {
                        "status": "passed",
                        "details": f"Consulta processada: {len(response)} chars"
                    }
                else:
                    test_results["integration_tests"]["full_query"] = {
                        "status": "failed", 
                        "details": "Resposta inadequada ou com erro"
                    }
            except Exception as e:
                test_results["integration_tests"]["full_query"] = {
                    "status": "failed",
                    "details": str(e)
                }
        
        # Avalia√ß√£o geral
        all_tests = {}
        all_tests.update(test_results["agent_tests"])
        all_tests.update(test_results["rag_tests"])
        all_tests.update(test_results["integration_tests"])
        
        passed = sum(1 for test in all_tests.values() if test.get("status") == "passed")
        total = len(all_tests)
        
        if total == 0:
            test_results["overall_status"] = "no_tests"
        elif passed == total:
            test_results["overall_status"] = "excellent"
        elif passed >= total * 0.8:
            test_results["overall_status"] = "good"
        elif passed >= total * 0.5:
            test_results["overall_status"] = "needs_attention"
        else:
            test_results["overall_status"] = "critical"
        
        # Recomenda√ß√µes
        if not self.rag_available:
            test_results["recommendations"].append("Instalar e configurar sistema RAG")
        if not self.system_ready:
            test_results["recommendations"].append("Verificar configura√ß√£o do agente")
        
        return test_results
    
    def __call__(self, inputs: Dict[str, Any]) -> Dict[str, Any]:
        """Compatibilidade com Streamlit."""
        question = inputs.get("question", "")
        
        if not question:
            return {"chat_history": []}
        
        response = self.consultar(question)
        
        # Atualizar mem√≥ria
        self.memory.chat_memory.add_user_message(question)
        self.memory.chat_memory.add_ai_message(response)
        
        return {"chat_history": self.memory.chat_memory.messages}

# Fun√ß√£o para criar o agente
def create_rag_agent(force_rag: bool = True, **kwargs):
    """
    Cria inst√¢ncia do agente RAG corrigido.
    
    Args:
        force_rag: Se True, exige sistema RAG funcional
        **kwargs: Argumentos adicionais
    """
    try:
        print("üöÄ Criando agente RAG corrigido...")
        
        agent = RAGAgentFixed(force_rag=force_rag, **kwargs)
        
        # Verificar se foi criado com sucesso
        if not agent.system_ready:
            if force_rag:
                raise RuntimeError("‚ùå Agente n√£o p√¥de ser inicializado completamente")
            else:
                print("‚ö†Ô∏è Agente criado com limita√ß√µes")
        
        # Executar teste inicial
        print("üîß Testando sistema...")
        test_results = agent.test_complete_system()
        print(f"üìä Status geral: {test_results['overall_status']}")
        
        if test_results['recommendations']:
            print("üí° Recomenda√ß√µes:")
            for rec in test_results['recommendations']:
                print(f"  - {rec}")
        
        return agent
        
    except Exception as e:
        print(f"‚ùå Erro ao criar agente: {e}")
        raise

# Fun√ß√£o de diagn√≥stico independente
def diagnose_system():
    """Executa diagn√≥stico completo do sistema."""
    print("üîß DIAGN√ìSTICO COMPLETO DO SISTEMA")
    print("=" * 50)
    
    # Verificar imports
    print("üì¶ VERIFICANDO DEPEND√äNCIAS:")
    
    dependencies = {
        "dotenv": "python-dotenv",
        "openai": "openai", 
        "langchain": "langchain",
        "langchain_openai": "langchain-openai",
        "chromadb": "chromadb",
        "sentence_transformers": "sentence-transformers"
    }
    
    missing_deps = []
    for module, package in dependencies.items():
        try:
            __import__(module)
            print(f"  ‚úÖ {package}")
        except ImportError:
            print(f"  ‚ùå {package}")
            missing_deps.append(package)
    
    if missing_deps:
        print(f"\n‚ùå DEPEND√äNCIAS FALTANDO:")
        print(f"pip install {' '.join(missing_deps)}")
        return False
    
    # Verificar vari√°veis de ambiente
    print(f"\nüîë VERIFICANDO CONFIGURA√á√ÉO:")
    api_key = os.getenv('OPENAI_API_KEY')
    if api_key:
        if api_key.startswith('sk-'):
            print(f"  ‚úÖ OPENAI_API_KEY configurada")
        else:
            print(f"  ‚ùå OPENAI_API_KEY inv√°lida")
            return False
    else:
        print(f"  ‚ùå OPENAI_API_KEY n√£o encontrada")
        print(f"  üí° Criar arquivo .env: OPENAI_API_KEY=sk-seu-token-aqui")
        return False
    
    # Verificar RAG System
    print(f"\nüîç VERIFICANDO SISTEMA RAG:")
    if RAG_AVAILABLE:
        print(f"  ‚úÖ M√≥dulo RAG importado")
        try:
            rag = RagSystem()
            if rag.is_initialized:
                status = rag.get_system_status()
                print(f"  ‚úÖ RAG inicializado")
                print(f"  üìä Documentos: {status.get('collection_count', 0)}")
            else:
                print(f"  ‚ùå RAG n√£o inicializado")
                return False
        except Exception as e:
            print(f"  ‚ùå Erro no RAG: {e}")
            return False
    else:
        print(f"  ‚ùå M√≥dulo RAG n√£o dispon√≠vel")
        return False
    
    print(f"\n‚úÖ SISTEMA PRONTO PARA USO!")
    return True

# Exemplo de uso interativo
if __name__ == "__main__":
    print("üöÄ SISTEMA RAG AGENT - VERS√ÉO CORRIGIDA")
    print("=" * 50)
    
    # Executar diagn√≥stico primeiro
    if not diagnose_system():
        print("\n‚ùå Sistema n√£o est√° pronto. Resolva os problemas acima.")
        exit(1)
    
    try:
        # Criar agente
        print(f"\nüéØ Criando agente...")
        agent = create_rag_agent(force_rag=True)
        
        print(f"\nüìä Informa√ß√µes do sistema:")
        info = agent.get_system_info()
        for key, value in info.items():
            if isinstance(value, bool):
                icon = "‚úÖ" if value else "‚ùå"
                print(f"  {icon} {key}: {value}")
            else:
                print(f"  üìÑ {key}: {value}")
        
        print(f"\n" + "=" * 50)
        print("üí¨ SESS√ÉO INTERATIVA INICIADA")
        print("Digite 'sair' para encerrar")
        print("Digite 'info' para status do sistema")
        print("Digite 'teste' para teste completo")
        print("=" * 50)
        
        while True:
            try:
                pergunta = input(f"\nüí° Sua pergunta sobre economia de S√£o Paulo:\n> ").strip()
                
                if pergunta.lower() in ['sair', 'exit', 'quit']:
                    print("üëã Encerrando sistema. At√© logo!")
                    break
                
                if pergunta.lower() == 'info':
                    info = agent.get_system_info()
                    print(f"\nüìä STATUS DO SISTEMA:")
                    print("=" * 30)
                    for key, value in info.items():
                        print(f"{key}: {value}")
                    print("=" * 30)
                    continue
                
                if pergunta.lower() == 'teste':
                    print(f"\nüîß Executando teste completo...")
                    test_results = agent.test_complete_system()
                    print(f"\nResultados:")
                    print(f"Status geral: {test_results['overall_status']}")
                    
                    if test_results.get('agent_tests'):
                        print(f"\nTestes do Agente:")
                        for test, result in test_results['agent_tests'].items():
                            status = "‚úÖ" if result['status'] == 'passed' else "‚ùå"
                            print(f"  {status} {test}: {result['details']}")
                    
                    if test_results.get('rag_tests'):
                        print(f"\nTestes do RAG:")
                        for test, result in test_results['rag_tests'].items():
                            if isinstance(result, dict) and 'status' in result:
                                status = "‚úÖ" if result['status'] == 'passed' else "‚ùå"
                                print(f"  {status} {test}: {result['details']}")
                    
                    if test_results.get('recommendations'):
                        print(f"\nRecomenda√ß√µes:")
                        for rec in test_results['recommendations']:
                            print(f"  üí° {rec}")
                    
                    continue
                
                if not pergunta:
                    print("‚ùì Por favor, digite uma pergunta v√°lida.")
                    continue
                
                print(f"\nüîç Processando sua consulta...")
                resposta = agent.consultar(pergunta)
                
                print(f"\n" + "=" * 60)
                print("üìä RESPOSTA:")
                print("=" * 60)
                print(resposta)
                print("=" * 60)
                
            except KeyboardInterrupt:
                print(f"\n\nüëã Encerrando sistema. At√© logo!")
                break
            except Exception as e:
                print(f"\n‚ùå Erro inesperado: {e}")
                print(f"üí° Use 'info' para verificar status do sistema")
        
    except Exception as e:
        print(f"‚ùå Erro na inicializa√ß√£o: {e}")
        print(f"\nüîß SOLU√á√ïES:")
        print(f"1. Verificar depend√™ncias: pip install chromadb sentence-transformers")
        print(f"2. Verificar arquivo .env com OPENAI_API_KEY")
        print(f"3. Executar diagn√≥stico: python agent_fixed.py")
        print(f"4. Verificar se h√° documentos na base ChromaDB")